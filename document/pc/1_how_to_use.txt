2017/10/30
紺野隆志

0. 注意
　それぞれの番号では異なるターミナルを立ち上げる

1. master
　 $ roscore

2. orb_slam2
　 $ cd ~/SLAM/ORB_SLAM2
　 $ rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/Monocular/ELP1080p.yaml 

3. USBcamera
　 $ roslaunch ~/SLAM/ORB_SLAM2/launch/camera.launch
　 
　 
4. Twistを使う場合 （速度と角速度の6成分）
 4-1. twistの立ち上げ（tfからtwistに変換して配信）
　  $ rosrun orbslam_tf sub_twist
　 (配信内容の確認)
　  $ rostopic echo sub_twist
　  
　4-2. 結果の確認
　　4-2-1. echoで確認
　　  $ rostopic list
　　  $ rostopic echo /camera/twist　
　　 
　 4-2-2. rqt_plotで確認
　　  $ rqt_plot
　　
　　 4-2-2-1. 以下のトピックを追加
　　  /camera/twist/linear
　　  /camera/twist/angular
　　
　 　4-2-2-2. 軸のレンジを適宜ズームしたりして変える

 4-3. clienct_velocityの立ち上げ（twistを購読して、UDPを使ってROSを使わないPCにtwistを配信）
　  $ rosrun orbslam_tf client_velocity

 4-4. master_velocityの立ち上げ(client_velocityのtwistを購読)
　  $ rosrun orbslam_tf master_velocity
　 
　 
5. 姿勢にクォータニオン（Pose）を使う場合 （位置とクォータニオンの7成分）
 5-1. Poseの立ち上げ（tfからPoseに変換して配信）
　  $ rosrun orbslam_tf sub_pose
　 (配信内容の確認)
　  $ rostopic echo sub_pose

 5-2. 結果の確認
　 5-2-1. echoで確認
　  $ rostopic list
　  $ rostopic echo /camera/pose　
　　 
　 5-2-2. rqt_plotで確認
　  $ rqt_plot
　　
　  5-2-2-1. 以下のトピックを追加
　   /camera/pose/position
　   /camera/pose/orientation
　　
　 　5-2-2-2. 軸のレンジを適宜ズームしたりして変える

 5-3. clienct_velocityの立ち上げ（Poseを購読して、UDPを使ってROSを使わないPCにPoseを配信）
　  $ rosrun orbslam_tf client_pose

 5-4. master_velocityの立ち上げ(client_poseのPoseを購読)
　  $ rosrun orbslam_tf master_pose
　 

6. 姿勢にRPYを使う場合 （位置とRPYの6成分）
 6-1. RPYの立ち上げ（tfからRPYに変換して配信）
　  $ rosrun orbslam_tf sub_rpy
　 (配信内容の確認)
　  $ rostopic echo sub_rpy


7. 可視化
 7-1. トピック通信の確認と出力
　 $ rostopic list
　 $ rostopic echo ${トピック名}

　7-2.　rqt_plotを使う
　　$ rqt_plot
　　7-2-1. 確認したいトピックの追加
　　
　7-3. rqt_graphを使う
　 $ rqt_graph
　 
　7-4. rvizを使う
　　$ rosrun rviz rviz
　　

8. IMUとCameraの比較
　  Terminal1
　   $ roscore
　 
　　 Terminal2
　   $ cd ~/SLAM/ORB_SLAM2
　   $ rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/Monocular/ELP1080p.yaml 
　
　  Terminal3
　   $ roslaunch ~/SLAM/ORB_SLAM2/launch/camera.launch
　　   
　  Terminal4
　   $ rosrun orbslam_tf twist_compare
　   
　  Terminal5
　　  $ rosrun imuz imuz_lowpass
　　  	or
　　  $ rosrun imuz imuz_deg_publisher
　　  
　 8-1. rqt_plotで確認
　  Terminal6
　   $ rqt_plot
　　
　  8-1-1. 以下のトピックを追加
　   /camera/twist/compare/angular
　   /imuz/lowpass/angular
　   	or
　   /imuz/deg/angular/angular
　　
　  8-1-2. 軸のレンジを適宜ズームしたりして変える
　  
　 8-2. rqtでプラグインして軸ごとに比較するグラフを作ってもよい
　 
　 
9. ロボットに送る
　9-1. 
   Terminal1　(roscore)
　   $ roscore
　  
　　 Terminal2 (SLAM)
　   $ cd ~/SLAM/ORB_SLAM2
　   $ rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/Monocular/ELP1080p.yaml 
　　   
　  Terminal3  
　   $ roslaunch robot robot.launch
　   	( $ roslaunch ~/SLAM/ORB_SLAM2/launch/camera.launch (camera) )
　   	( $ rosrun robot twist_compare (速度の計算、配信) ) 
　   	( $ rosrun robot real_client   (速度の受け取り、ros以外に配信) )
         
   ( Terminal4 (ros以外の速度の受け取り) )
     ( $ rosrun robot real_master )
    
 9-2. 可視化
 　　Terminal5　(rqt)
　   $ rqt
　   
　 9-2-1. 以下のトピックを追加
   /camera/twist/compare/angular
   /camera/twist/compare/linear
  
  
10. アスパラロボットで評価実験 
 10-1. ipアドレスの確認
 　$ ifconfig eth0
 　 or
 　$ hostname -I
 
 10-2. ロボット側で
   1. aspara フォルダを適切なところに置く
   2. client.cppの編集 (以下の編集)
   　	buf.w[0] = (int)(1000* ${x} );
	buf.w[1] = (int)(1000* ${y} );
	buf.w[2] = (int)(1000* ${z} );
	buf.w[3] = (int)(1000* ${trans});
   2. ビルド
    $ cmake .
    $ make
   3. 実行
    $ ./client
 
 10-3. SLAM側で
  10-3-1
 　　Terminal1　(roscore)
　   $ roscore
　  
　　 Terminal2 (SLAM)
　   $ cd ~/SLAM/ORB_SLAM2
　   $ rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/Monocular/ELP1080p.yaml 
　　   
　  Terminal3 
　   $ roslaunch asparagus aspara.launch 
　   	( $ roslaunch ~/SLAM/ORB_SLAM2/launch/camera.launch (camera) )
　   	( $ rosrun asparagus twist_compare (速度の計算、配信) )
　   	( $ rosrun asparagus master (真値の受け取り) )    
    
  10-3-2. 可視化
  　Terminal4　(rqt)
　   $ rqt
　   
　 10-3-3. 以下のトピックを追加
    /camera/twist/compare/angular
    /camera/twist/compare/linear
    /asparagus/twist/angular
    /asparagus/twist/linear
    

gnome-terminal -e "sh -c 'cd ~/SLAM/ORB_SLAM2;bash'"
gnome-terminal -e "sh -c 'cd ~/SLAM/ORB_SLAM2 && rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/Monocular/ELP1080p.yaml;bash'"



$ aspara.sh
保存したいディレクトリで(data)
$ rosrun asparagus log
$ rqt_plot







