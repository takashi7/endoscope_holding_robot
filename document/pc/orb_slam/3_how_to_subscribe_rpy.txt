2017/10/25
紺野隆志

0. 注意
　1. '1_how_to_publish.txt'　をすべて行ったこと前提
　2. catkinのワークスペースのディレクトリは '~/catkin_ws' とした

1. すること
　1. ORB_SLAM2でros_mono.ccが配信するカメラのtfを、異なるパッケージで購読する
　2. カメラの姿勢はQuaternionで表わされているので、ロール・ピッチ・ヨーに変換する
　3. カメラの位置と姿勢を '/camera_rpy' で配信

2. パッケージの作成
　$ cd ~/catkin_ws/src
　$ catkin_create_pkg orbslam_tf tf roscpp rospy

3. パッケージのビルド
 $ cd ~/catkin_ws
 $ catkin_make 
 
4. sub_rpy.cpp の編集
 4-1.  
　　$ roscd orbslam_tf
　　$ mkdir src
　　$ cd src
　　$ gedit sub_rpy.cpp
　
　4-2. sub_rpy.cpp　の編集
  以下をコピペ　
  適宜修正する 
	#include <ros/ros.h>
	#include "geometry_msgs/TransformStamped.h"
	#include "tf/transform_datatypes.h"
	#include "geometry_msgs/Twist.h"
	#include "geometry_msgs/Quaternion.h"
	#include <tf/transform_listener.h>


	int main(int argc, char** argv){
	  ros::init(argc, argv, "Mono_rpy");
	  ros::NodeHandle node;
	  tf::TransformListener listener;  
	  ros::Publisher caemera_pose = node.advertise<geometry_msgs::Twist>("camera/pose/rpy", 10);    
	  double roll, pitch, yaw;
	  
	  ros::Rate rate(10.0);
	  while (node.ok()){
	    tf::StampedTransform transform;
	    try{
	      listener.lookupTransform("world", "camera_pose", ros::Time(0), transform);
	    }
	    catch (tf::TransformException &ex) {
	      ROS_ERROR("%s",ex.what());
	      ros::Duration(1.0).sleep();
	      continue;
	    }
	    
	    geometry_msgs::Twist cam_msg;
	    cam_msg.linear.x = transform.getOrigin().x();
	    cam_msg.linear.y = transform.getOrigin().y();
	    cam_msg.linear.z = transform.getOrigin().z();
	    
	    tf::Matrix3x3(transform.getRotation()).getRPY(roll, pitch, yaw);
	    cam_msg.angular.x = roll;
	    cam_msg.angular.y = pitch;
	    cam_msg.angular.z = yaw;    
	    
	    caemera_pose.publish(cam_msg);

	    rate.sleep();
	  }
	  return 0;
	};
　	
5. CMakeLists.txtの編集
　5-1. 
　 $ roscd orbslam_tf
　 $ gedit CMakeLists.txt
　
　5-2. include_directories()の下に以下を挿入
　 　実行名は適宜変えてよい
	add_executable(sub_rpy src/sub_rpy.cpp)
	target_link_libraries(sub_rpy ${catkin_LIBRARIES})

6. パッケージのビルド
 6-1. 
　 $ cd ~/catkin_ws
　 $ catkin_make
 
 6-2. 
  成功すると '~/catkin_ws/devel/lib/orbslam_tf' に 'sub_rpy' という実行ファイルができる 

7. '/camera/pose/rpy'　の確認 
　　Terminal1
　　 $ roscore
　 
　　Terminal2
　　 $ cd ~/SLAM/ORB_SLAM2
　　 $ rosrun ORB_SLAM2 Mono Vocabulary/ORBvoc.txt Examples/Monocular/ELP1080p.yaml 
　
　　Terminal3
　　 $ roslaunch ~/SLAM/ORB_SLAM2/launch/camera.launch

　7-1. echoで確認
　　Terminal4
　　 $ rostopic list
　　 $ rostopic echo /camera/pose/rpy
　


参考 （tfが分からなかったので1のチュートリアルをひと通り読んだ）
 内容
　　1. ja/tf/Tutorials
　 2. シンプルな配信者(Publisher)と購読者(Subscriber)を書く(C++)
　 3. tf::Transform Class Reference
　 4. geometry_msgs Msg/Srv Documentation
　 5. 世界で一番簡単なtfの使い方]
　 6. tf,tf2完全理解
　 7. ロボットの位置推定におけるクォータニオン
　 8. plot/print rpy from quaternion
　
　URL
　 1. http://wiki.ros.org/ja/tf/Tutorials
　 2. http://wiki.ros.org/ja/ROS/Tutorials/WritingPublisherSubscriber%28c%2B%2B%29
　 3. http://docs.ros.org/jade/api/tf/html/c++/classtf_1_1Transform.html
 　4. http://docs.ros.org/api/geometry_msgs/html/index-msg.html
　 5. http://myenigma.hatenablog.com/entry/20130210/1360491625
　 6. https://www.slideshare.net/kojiterada5/tftf2
　 7. http://myenigma.hatenablog.com/entry/20130719/1374304154
　 8. https://answers.ros.org/question/11545/plotprint-rpy-from-quaternion/
　

　
